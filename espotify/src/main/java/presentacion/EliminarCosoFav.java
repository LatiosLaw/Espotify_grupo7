package presentacion;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import logica.controladores.IControladorAlbum;
import logica.controladores.IControladorCliente;
import logica.controladores.IControladorListaParticular;
import logica.controladores.IControladorListaPorDefecto;
import logica.controladores.IControladorTema;
import logica.dt.DataAlbum;
import logica.dt.DataCliente;
import logica.dt.DataListaParticular;
import logica.dt.DataListaPorDefecto;
import logica.dt.DataListaReproduccion;
import logica.dt.DataTema;
import org.eclipse.persistence.jpa.jpql.parser.DateTime;

public class EliminarCosoFav extends javax.swing.JPanel {
 private final IControladorCliente controlCli;
    private final IControladorTema controlTema;
    private final IControladorListaParticular controlLipa;
    private final IControladorListaPorDefecto controlLiporde;
    private final IControladorAlbum controlAlb;

    public EliminarCosoFav(IControladorCliente icc, IControladorTema ict, IControladorListaParticular iclp, IControladorListaPorDefecto iclpd, IControladorAlbum ica) {
        initComponents();
        controlCli = icc;
        controlAlb = ica;
        controlLipa = iclp;
        controlLiporde = iclpd;
        controlTema = ict;
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCliente = new javax.swing.JTextField();
        lblCliente = new javax.swing.JLabel();
        cbxCoso = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCoso = new javax.swing.JList<>();
        txtBusqueda1 = new javax.swing.JTextField();
        lblBusqueda1 = new javax.swing.JLabel();
        lblPrimeraBusqueda = new javax.swing.JLabel();
        btnFav = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(860, 471));

        txtCliente.setColumns(10);

        lblCliente.setText("Nick Cliente :");

        cbxCoso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OPT", "Temas", "Listas", "Albums" }));
        cbxCoso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCosoActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstCoso);

        txtBusqueda1.setColumns(10);

        lblBusqueda1.setText("Agregar a Favoritos :");

        lblPrimeraBusqueda.setText("Primera Busqueda");

        btnFav.setText("OK");
        btnFav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFavActionPerformed(evt);
            }
        });

        btnBuscar.setText("OK");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxCoso, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(72, 72, 72)
                        .addComponent(lblPrimeraBusqueda))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addGap(162, 162, 162))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblBusqueda1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFav, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBusqueda1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(170, 170, 170))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrimeraBusqueda))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBusqueda1)
                            .addComponent(txtBusqueda1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addComponent(btnFav, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbxCoso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCliente))
                        .addGap(34, 34, 34)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxCosoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCosoActionPerformed
        String token = String.valueOf(this.cbxCoso.getSelectedItem());
        
        if(null != token)switch (token) {
         case "OPT":
             
             JOptionPane.showMessageDialog(null, "Elija otra opcion aparte de OPT");
             
             break;
         case "Temas":
             
           
             
             break;
         case "Listas":
          
             
             break;
         case "Albums":
             
         
             
             break;
         default:
             break;
     }
        
        
        
    }//GEN-LAST:event_cbxCosoActionPerformed

    private void btnFavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFavActionPerformed
        String token = String.valueOf(cbxCoso.getSelectedItem());
        String cliente = this.txtCliente.getText();
        String coso = this.txtBusqueda1.getText();
        DataCliente cli = controlCli.consultarPerfilCliente(cliente);
        if(cli == null){
             JOptionPane.showMessageDialog(null, "No existe usuario con el nickname indicado");
        }else{
            switch (token) {
                case "OPT":
                    JOptionPane.showMessageDialog(null, "Seleccione otra opcion a parte de OPT.");
                    //controlCli.agregarTema(nickcli, tema);
                    break;
                case "Temas":
                    DataTema tema = controlTema.retornarTema2LaSecuela(coso);
                    if(tema == null){
                        JOptionPane.showMessageDialog(null, "No existe un tema con ese nombre en los favoritos del Cliente.");
                    }else{
                        controlCli.eliminarTema(cli, tema);
                        JOptionPane.showMessageDialog(null, "Se elimino el Tema de la lista de favoritos");
                        limpiarCampos();
                    }       
                    break;
                case "Listas":
                    DataListaReproduccion losta = this.controlLipa.devolverInformacionListaRepro(coso);
                    if(losta == null){
                        JOptionPane.showMessageDialog(null, "No existe lista con ese nombre dentro de los favoritos del Cliente");
                    }else{
                        controlCli.eliminarLista(cli, losta);
                    JOptionPane.showMessageDialog(null, "Se elimino la lista de la lista de favoritos");
                    limpiarCampos();
                    }
                    break;
                case "Albums":
                    
                    DataAlbum album = this.controlAlb.retornarInfoAlbum(coso);
                    if("ALBUM NO EXISTE".equals(album.getNombre())){
                         JOptionPane.showMessageDialog(null, "Seleccione otra opcion a parte de OPT.");
                    }else{
                        controlCli.eliminarAlbum(cli, album);
                        JOptionPane.showMessageDialog(null, "Se elimino el Album de la lista de favoritos");
                        limpiarCampos();
                    }
                    break;
                default:
                    break;
            }
        }
        
    }//GEN-LAST:event_btnFavActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
       String token = String.valueOf(this.cbxCoso.getSelectedItem());
        if(controlCli.consultarPerfilCliente(this.txtCliente.getText()) == null){
             JOptionPane.showMessageDialog(null, "No existe usuario seleccionado");
        }else{
             if(null != token)switch (token) {
         case "OPT":
           
             JOptionPane.showMessageDialog(null, "Elija otra opcion aparte de OPT");
             
             break;
         case "Temas":
          
            Collection <String> temas = this.controlCli.obtenerTemaFavCliente(this.txtCliente.getText());
            
             if(temas == null){
                 JOptionPane.showMessageDialog(null, "No existe temas en la lista de favoritos del cliente indicado");
             }else{
                 this.cargarLstFav(temas);
             }
             break;
         case "Listas":
           
             
            
                    Collection <String> listas = controlCli.obtenerListasFavCliente(txtCliente.getText());
                    if(listas == null){
                         JOptionPane.showMessageDialog(null, "El Cliente indicado no tiene ni una lista favorita");
                    }else{
                      this.cargarLstFav(listas);
                    }
             break;
         case "Albums":
            
             Collection <String> albums = controlCli.obtenerAlbumFavCliente(txtCliente.getText());
             
             if(albums == null){
                  JOptionPane.showMessageDialog(null, "El Cliente indicado no tiene ni un album favorita");
             }else{
                 this.cargarLstFav(albums);
             }
             break;
         default:
             break;
     }
        }
       
    }//GEN-LAST:event_btnBuscarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnFav;
    private javax.swing.JComboBox<String> cbxCoso;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBusqueda1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblPrimeraBusqueda;
    private javax.swing.JList<String> lstCoso;
    private javax.swing.JTextField txtBusqueda1;
    private javax.swing.JTextField txtCliente;
    // End of variables declaration//GEN-END:variables
    
    public void limpiarCampos(){
        
        this.txtBusqueda1.setText("");
        this.txtCliente.setText("");
        
    }
    public void cargarLstFav(Collection<String> cole) {
        DefaultListModel<String> model;

        model = new DefaultListModel<>();

        for (String elemento : cole) {
            //  System.out.print("Elemento de lstSeguidos"+elemento);
            String nombre = elemento;
            model.addElement(nombre);
        }
        lstCoso.setModel(model);
    }
}
