package presentacion;

import java.awt.Component;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import logica.controladores.IControladorCliente;
import logica.controladores.IControladorGenero;
import logica.controladores.IControladorListaParticular;
import logica.controladores.IControladorListaPorDefecto;
import logica.dt.DataArtista;
import logica.dt.DataCliente;
import logica.dt.DataGenero;
import logica.dt.DataListaParticular;

public class AgregarListaDeReproduccion extends javax.swing.JPanel {

    private final IControladorCliente controlCli;
    private final IControladorGenero controlGen;
    private final IControladorListaParticular controlListPar;
    private final IControladorListaPorDefecto controlListPD;
    private Component lblMsjArch;
    private final JFileChooser fileChooserImagen;
    File selectedFile;

    public AgregarListaDeReproduccion(IControladorCliente icc, IControladorGenero icg, IControladorListaParticular ilpc, IControladorListaPorDefecto ilpd) {
        controlCli = icc;
        controlGen = icg;
        controlListPar = ilpc;
        controlListPD = ilpd;
        initComponents();
        fileChooserImagen = new JFileChooser();
        fileChooserImagen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooserImagen.setDialogTitle("Selecciona una imagen para la lista");
        fileChooserImagen.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Imagenes (JPG, PNG)", "jpg", "png"));
        lblGenero.setVisible(false);
        lblCliente.setVisible(false);
        ComboGenero.setVisible(false);
        ComboCliente.setVisible(false);
        cargarGeneros();
        cargarClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConfirmar = new javax.swing.JButton();
        ComboBoxTipoLista = new javax.swing.JComboBox<>();
        lblNombreLista = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblImagen = new javax.swing.JLabel();
        btnSubirImagen = new javax.swing.JButton();
        lblCliente = new javax.swing.JLabel();
        ComboCliente = new javax.swing.JComboBox<>();
        lblGenero = new javax.swing.JLabel();
        ComboGenero = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(860, 471));

        btnConfirmar.setText("Agregar List");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        ComboBoxTipoLista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OPT", "Lista Por Defecto", "Lista Particular" }));
        ComboBoxTipoLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxTipoListaActionPerformed(evt);
            }
        });

        lblNombreLista.setText("Nombre : ");

        lblImagen.setText("Imagen (Opcional) : ");

        btnSubirImagen.setText("Subir");
        btnSubirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubirImagenActionPerformed(evt);
            }
        });

        lblCliente.setText("Cliente : ");

        lblGenero.setText("Genero : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNombreLista)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNombre))
                            .addComponent(ComboBoxTipoLista, 0, 225, Short.MAX_VALUE))
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCliente)
                            .addComponent(lblGenero))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboGenero, 0, 158, Short.MAX_VALUE)
                            .addComponent(ComboCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(232, 232, 232))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSubirImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxTipoLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCliente)
                    .addComponent(ComboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreLista)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGenero)
                    .addComponent(ComboGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubirImagen)
                    .addComponent(lblImagen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
       String tokenx = String.valueOf(ComboBoxTipoLista.getSelectedItem());
        switch (tokenx) {
            case "OPT" -> {
                vaciarCampos();
            }
            case "Lista Por Defecto" -> {
                if(verificarListaDefecto() == true){
                    if(selectedFile!=null){
                        controlListPD.crearLista(txtNombre.getText(), new DataGenero(String.valueOf(ComboGenero.getSelectedItem())), selectedFile.getName());
                     SubirFoto(); 
                    }else{
                    controlListPD.crearLista(txtNombre.getText(), new DataGenero(String.valueOf(ComboGenero.getSelectedItem())), "default");
                    }
                    vaciarCampos();
                    JOptionPane.showMessageDialog(null, "Lista creada con exito.");
                }
            }
            case "Lista Particular" -> {
                if(verificarListaParticular() == true){
                    if(selectedFile!=null){
                        controlListPar.crearListaConVisibilidad(txtNombre.getText(), controlCli.consultarPerfilCliente(String.valueOf(ComboCliente.getSelectedItem())), false, selectedFile.getName());
                     SubirFoto(); 
                    }else{
                    controlListPar.crearListaConVisibilidad(txtNombre.getText(), controlCli.consultarPerfilCliente(String.valueOf(ComboCliente.getSelectedItem())), false, "default");
                    }
                    vaciarCampos();
                    JOptionPane.showMessageDialog(null, "Lista creada con exito.");
                }
            }
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void ComboBoxTipoListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxTipoListaActionPerformed
        String tokenx = String.valueOf(ComboBoxTipoLista.getSelectedItem());
        switch (tokenx) {
            case "OPT" -> {
               lblGenero.setVisible(false);
               lblCliente.setVisible(false);
               ComboGenero.setVisible(false);
               ComboCliente.setVisible(false);
            }
            case "Lista Por Defecto" -> {
                lblCliente.setVisible(false);
                ComboCliente.setVisible(false);
                lblGenero.setVisible(true);
                ComboGenero.setVisible(true);
            }
            case "Lista Particular" -> {
                lblCliente.setVisible(true);
                ComboCliente.setVisible(true);
                lblGenero.setVisible(false);
                ComboGenero.setVisible(false);
            }
        }
    }//GEN-LAST:event_ComboBoxTipoListaActionPerformed

    private void btnSubirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubirImagenActionPerformed
        int result = fileChooserImagen.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooserImagen.getSelectedFile();
            if (selectedFile.getName().endsWith(".png") || selectedFile.getName().endsWith(".jpg")) {
                btnSubirImagen.setText("Imagen: " + selectedFile.getName());
            } else {
                btnSubirImagen.setText("Subir");
            }
        }
    }//GEN-LAST:event_btnSubirImagenActionPerformed

    private void vaciarCampos() {
        txtNombre.setText(null);
        ComboGenero.setSelectedIndex(0);
        ComboCliente.setSelectedIndex(0);
        fileChooserImagen.setSelectedFile(null);
    }
    
    private void SubirFoto(){
        if (fileChooserImagen.getSelectedFile() != null) {
                    selectedFile = fileChooserImagen.getSelectedFile();
                    File destinationDir = new File("espotify\\src\\main\\java\\imagenes\\listas");
                    if (!destinationDir.exists()) {
                        destinationDir.mkdirs(); // Crear la carpeta si no existe
                    }
                    // Crear el archivo de destino con el mismo nombre que el seleccionado
                    File destinationFile = new File(destinationDir, selectedFile.getName());
                    try{
                        Files.copy(selectedFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                        System.out.println("Archivo guardado exitosamente en: " + destinationFile.getAbsolutePath());
                    }catch(Exception e){
                        System.out.println("Un error ha ocurrido");
                    }
                        }
    }
    
    private void cargarClientes(){
        Collection<DataCliente> cole = this.controlCli.mostrarClientes();
        DefaultComboBoxModel<String> model;
        model = new DefaultComboBoxModel<>();
        model.addElement("OPT");
        for (DataCliente elemento : cole) {
            String nick = elemento.getNickname();
            model.addElement(nick);
        }
        this.ComboCliente.setModel(model);
    }
    
    private void cargarGeneros(){
        Collection<String> cole = this.controlGen.mostrarGeneros();
        DefaultComboBoxModel<String> model;
        model = new DefaultComboBoxModel<>();
        model.addElement("OPT");
        for (String elemento : cole) {
            model.addElement(elemento);
        }
        this.ComboGenero.setModel(model);
    }
    
    private boolean verificarListaDefecto() {
        if(String.valueOf(ComboGenero.getSelectedItem()) != "OPT" && !txtNombre.getText().isEmpty()){
            Collection<String> listas = controlListPD.listarListasPorDefecto();
            Iterator<String> iterator = listas.iterator();
        while (iterator.hasNext()) {
            String nombre_lista = iterator.next();
            if(nombre_lista.equals(txtNombre.getText())){
                JOptionPane.showMessageDialog(null, "Ya existe una lista por defecto a ese nombre.");
                return false;
            }
        }
        return true;
        }else{
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un genero y complete el funcionario.");
            return false;
        }
    }
    
    private boolean verificarListaParticular() {
        if(String.valueOf(ComboCliente.getSelectedItem()) != "OPT" && !txtNombre.getText().isEmpty()){
            Collection<DataListaParticular> listas = controlListPar.devolverListadeCliente(String.valueOf(ComboCliente.getSelectedItem()));
            Iterator<DataListaParticular> iterator = listas.iterator();
        while (iterator.hasNext()) {
            DataListaParticular lista = iterator.next();
            if(lista.getNombre().equals(txtNombre.getText())){
                JOptionPane.showMessageDialog(null, "Ya existe una lista con ese nombre en ese cliente.");
                return false;
            }
        }
        return true;
        }else{
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un cliente y complete el funcionario.");
            return false;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxTipoLista;
    private javax.swing.JComboBox<String> ComboCliente;
    private javax.swing.JComboBox<String> ComboGenero;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnSubirImagen;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblGenero;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblNombreLista;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
