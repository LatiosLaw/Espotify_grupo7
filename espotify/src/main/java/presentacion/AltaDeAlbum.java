package presentacion;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import logica.controladores.IControladorAlbum;
import logica.controladores.IControladorGenero;
import logica.controladores.IControladorTema;
import logica.dt.DataGenero;
import logica.dt.DataTema;
import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.Mp3File;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import logica.controladores.IControladorArtista;
import logica.dt.DataAlbum;

public class AltaDeAlbum extends javax.swing.JPanel {

    private final IControladorAlbum controlAlb;
    private final IControladorGenero controlGen;
    private final IControladorArtista controlArt;
    private final IControladorTema controlTem;
    private final JFileChooser fileChooser;
    private final Collection<String> generos_seleccionados;
    private final ArrayList<String> temas_del_album;

    public AltaDeAlbum(IControladorAlbum icalb, IControladorGenero icg, IControladorTema ict, IControladorArtista ica) {
        controlAlb = icalb;
        controlGen = icg;
        controlArt = ica;
        controlTem = ict;
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Selecciona un archivo MP3");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos MP3", "mp3"));

        generos_seleccionados = new ArrayList<>();
        temas_del_album = new ArrayList<>();

        initComponents();
        cargarGeneros();

        txtAnio.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) { // Si no es un número
                    e.consume(); // Bloquea la tecla
                }
            }
        });

        txtPosTemaAlb.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) { // Si no es un número
                    e.consume(); // Bloquea la tecla
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblArt = new javax.swing.JLabel();
        txtArt = new javax.swing.JTextField();
        lblNomAlb = new javax.swing.JLabel();
        txtNomAlb = new javax.swing.JTextField();
        lblAnioAlb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listGen = new javax.swing.JList<>();
        lblGenAlb1 = new javax.swing.JLabel();
        lblNomTemaAlb = new javax.swing.JLabel();
        txtNomTemaAlb = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lblNomTemaAlb1 = new javax.swing.JLabel();
        cbxTipMus = new javax.swing.JComboBox<>();
        txtTipMus = new javax.swing.JTextField();
        btnConfirmar = new javax.swing.JButton();
        lblMsjArch = new javax.swing.JLabel();
        btnArch = new javax.swing.JButton();
        btnConfTem = new javax.swing.JButton();
        txtLinkImg = new javax.swing.JTextField();
        txtAnio = new javax.swing.JTextField();
        btnSelGen = new javax.swing.JButton();
        btnReiGen = new javax.swing.JButton();
        lblGenSel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listGenSelect = new javax.swing.JList<>();
        lblGenDelSis = new javax.swing.JLabel();
        lblDireccionTema = new javax.swing.JLabel();
        txtPosTemaAlb = new javax.swing.JTextField();
        btnNukear1 = new javax.swing.JButton();
        lblPosTemaAlb = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(860, 471));

        lblArt.setText("Artista creador del album :");

        lblNomAlb.setText("Nombre del album :");

        lblAnioAlb.setText("Año del album :");

        jScrollPane1.setViewportView(listGen);

        lblGenAlb1.setText("Link de la imagen (opcional) :");

        lblNomTemaAlb.setText("Nombre del tema :");

        txtNomTemaAlb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomTemaAlbActionPerformed(evt);
            }
        });

        jList1.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jList1HierarchyChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        lblNomTemaAlb1.setText("Temas del album :");

        cbxTipMus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Archivo mp3", "Enlace web" }));
        cbxTipMus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipMusActionPerformed(evt);
            }
        });

        btnConfirmar.setText("Subir Album");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        btnArch.setText("Subir Archivo");
        btnArch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchActionPerformed(evt);
            }
        });

        btnConfTem.setText("Subir Tema");
        btnConfTem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfTemActionPerformed(evt);
            }
        });

        btnSelGen.setText("Seleccionar Genero");
        btnSelGen.setToolTipText("Selecciona con un click el genero en la lista de la derecha, luego presiona seleccionar genero");
        btnSelGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelGenActionPerformed(evt);
            }
        });

        btnReiGen.setText("Reinicar Generos");
        btnReiGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiGenActionPerformed(evt);
            }
        });

        lblGenSel.setText("Generos Seleccionados : ");

        jScrollPane3.setViewportView(listGenSelect);

        lblGenDelSis.setText("Generos del Sistema : ");

        lblDireccionTema.setText("URL Descargable o Link :");

        txtPosTemaAlb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPosTemaAlbActionPerformed(evt);
            }
        });

        btnNukear1.setText("Cancelar Album");
        btnNukear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNukear1ActionPerformed(evt);
            }
        });

        lblPosTemaAlb.setText("Posicion del tema :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNomAlb)
                            .addComponent(lblArt)
                            .addComponent(lblGenAlb1)
                            .addComponent(lblAnioAlb))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLinkImg, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(txtArt)
                            .addComponent(txtNomAlb)
                            .addComponent(txtAnio)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnReiGen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblGenSel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGenDelSis)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelGen))))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(lblMsjArch, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblNomTemaAlb, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblPosTemaAlb, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addGap(18, 18, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtPosTemaAlb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtNomTemaAlb, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblNomTemaAlb1)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(cbxTipMus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnArch)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnConfTem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblDireccionTema)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtTipMus, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(134, 134, 134))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNukear1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblArt)
                            .addComponent(txtArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblNomTemaAlb1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNomAlb)
                            .addComponent(txtNomAlb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGenAlb1)
                            .addComponent(txtLinkImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAnioAlb)
                            .addComponent(txtAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGenSel)
                            .addComponent(lblGenDelSis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReiGen)
                            .addComponent(btnSelGen)
                            .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNukear1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNomTemaAlb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNomTemaAlb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPosTemaAlb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPosTemaAlb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDireccionTema)
                            .addComponent(txtTipMus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxTipMus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnArch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConfTem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMsjArch)))
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean insertarEnPosicion(ArrayList<String> temas, String temazo, int posicion) {
        posicion = posicion - 1;
        // Verificar que la posición sea válida
        if (posicion < 0) {
            return false;
        }

        if (posicion > temas.size()) {
            temas.add(temazo);
            return true;
        } else {
            temas.add(posicion, temazo); // El método add en ArrayList automáticamente mueve los elementos hacia abajo
            return true;
        }

        // Insertar el nuevo elemento en la posición deseada
    }

    private void txtNomTemaAlbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomTemaAlbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomTemaAlbActionPerformed

    private void jList1HierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jList1HierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1HierarchyChanged

    private void btnConfTemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfTemActionPerformed
        if (!txtNomTemaAlb.getText().isEmpty() && !txtPosTemaAlb.getText().isEmpty() && !txtTipMus.getText().isEmpty()) {
            String nombre_tema = txtNomTemaAlb.getText();
            Integer posicion_deseada = Integer.parseInt(txtPosTemaAlb.getText());
            if (cbxTipMus.getSelectedItem() == "Archivo mp3") {
                File selectedFile;
                if (fileChooser.getSelectedFile() != null) {
                    selectedFile = fileChooser.getSelectedFile();
                    File destinationDir = new File("espotify\\src\\main\\java\\temas");

                    if (!destinationDir.exists()) {
                        destinationDir.mkdirs(); // Crear la carpeta si no existe
                    }

                    // Crear el archivo de destino con el mismo nombre que el seleccionado
                    File destinationFile = new File(destinationDir, selectedFile.getName());

                    // Copiar el archivo al destino
                    if (selectedFile.getName().endsWith(".mp3")) {
                        try {
                            // Extract duration from the MP3 file
                            Mp3File mp3File = new Mp3File(selectedFile.getAbsolutePath());
                            if (mp3File.hasId3v2Tag()) {
                                ID3v2 id3v2Tag = mp3File.getId3v2Tag();
                                long durationInSeconds = mp3File.getLengthInSeconds();
                                if (insertarEnPosicion(temas_del_album, nombre_tema, posicion_deseada) && !txtTipMus.getText().isEmpty() && controlTem.crearTemaDefault(nombre_tema, (int) durationInSeconds, txtTipMus.getText(), selectedFile.getName())) {
                                    JOptionPane.showMessageDialog(lblMsjArch, "Tema agregado con exito");
                                    DefaultListModel<String> model = new DefaultListModel();
                                    Iterator<String> iterator = temas_del_album.iterator();
                                    while (iterator.hasNext()) {
                                        model.addElement(iterator.next());
                                    }
                                    jList1.setModel(model);
                                    txtNomTemaAlb.setText(null);
                                    txtPosTemaAlb.setText(null);
                                    fileChooser.setSelectedFile(null);
                                    txtTipMus.setText(null);
                                    lblMsjArch.setText("El archivo no se reconoce como un mp3");
                                    try {
                                        Files.copy(selectedFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                                        System.out.println("Archivo guardado exitosamente en: " + destinationFile.getAbsolutePath());
                                    } catch (IOException i) {
                                        System.out.println("Error al guardar el archivo.");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(lblMsjArch, "Un error ha ocurrido, es posible que la posicion del tema en la lista no sea valida o el nombre se encuentre repetido.");
                                }
                            } else {
                                JOptionPane.showMessageDialog(lblMsjArch, "Un error ha ocurrido.");
                            }
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(lblMsjArch, "Error al leer el archivo MP3");
                        }

                    } else {
                        JOptionPane.showMessageDialog(lblMsjArch, "Por favor, seleccione un archivo MP3");
                    }
                } else {
                    JOptionPane.showMessageDialog(lblMsjArch, "Por favor, seleccione un archivo MP3");
                }

            } else {
                if (insertarEnPosicion(temas_del_album, nombre_tema, posicion_deseada) && controlTem.crearTemaDefault(nombre_tema, 0, txtTipMus.getText(), null)) {
                    JOptionPane.showMessageDialog(lblMsjArch, "Tema agregado con exito");
                    DefaultListModel<String> model = new DefaultListModel();
                    Iterator<String> iterator = temas_del_album.iterator();
                    while (iterator.hasNext()) {
                        model.addElement(iterator.next());
                    }
                    jList1.setModel(model);
                    txtNomTemaAlb.setText(null);
                    txtTipMus.setText(null);
                    txtPosTemaAlb.setText(null);
                    fileChooser.setSelectedFile(null);
                    txtTipMus.setText(null);
                } else {
                    JOptionPane.showMessageDialog(lblMsjArch, "Un error ha ocurrido, es posible que la posicion del tema en la lista no sea valida o el nombre se encuentre repetido.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(lblMsjArch, "Nombre, posicion del tema y un link de descarga o para escucharlo son obligatorios.");
        }

    }//GEN-LAST:event_btnConfTemActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if (txtArt.getText().isEmpty() || txtNomAlb.getText().isEmpty() || txtAnio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(lblMsjArch, "Por favor, complete el formulario con la informacion necesaria");
        } else {
            if (controlArt.retornarArtista(txtArt.getText()) != null) {
                String nick_artista = txtArt.getText();
                String nombre_album = txtNomAlb.getText();
                String imagen = txtLinkImg.getText();
                Integer año_album = Integer.parseInt(txtAnio.getText());

                //// CALCULAR GENEROS SELECCIONADOS
                Collection<DataGenero> generos = new ArrayList<>();
                if (generos_seleccionados.isEmpty()) {
                    JOptionPane.showMessageDialog(lblMsjArch, "Por favor, seleccione generos para el album");
                } else {
                    Iterator<String> iterator = generos_seleccionados.iterator();
                    while (iterator.hasNext()) {
                        String elemento = iterator.next();
                        generos.add(new DataGenero(elemento));
                    }
                    while (iterator.hasNext()) {

                    }
                }
                ////

                //// CALCULAR TEMAS SELECCIONADOS
                Collection<DataTema> temas = new ArrayList<>();
                if (temas_del_album.isEmpty()) {
                    JOptionPane.showMessageDialog(lblMsjArch, "Por favor, genere temas para el album");
                } else {
                    Iterator<String> iterator = temas_del_album.iterator();
                    Integer posicion = 1;
                    while (iterator.hasNext()) {
                        DataTema tema_actual = controlTem.retornarTema(iterator.next());
                        tema_actual.setPos(posicion);
                        posicion = posicion + 1;
                        tema_actual.setAlbum(new DataAlbum(txtNomAlb.getText()));
                        temas.add(tema_actual);
                    }

                    if (txtLinkImg.getText().isEmpty()) {
                        DataAlbum album_nuevo = controlAlb.agregarAlbum(nick_artista, nombre_album, "default", año_album, temas);
                        Iterator<String> iterator_gen = generos_seleccionados.iterator();
                        while (iterator_gen.hasNext()) {
                            String genero = iterator_gen.next();
                            Collection<String> albumes = controlAlb.retornarAlbumsDelGenero(genero);
                            controlGen.actualizarGenero(new DataGenero(genero), albumes, album_nuevo);
                        }
                        JOptionPane.showMessageDialog(lblMsjArch, "Album agregado con exito");
                        reiniciarCampos();
                    } else {
                        DataAlbum album_nuevo = controlAlb.agregarAlbum(nick_artista, nombre_album, imagen, año_album, temas);
                        Iterator<String> iterator_gen = generos_seleccionados.iterator();
                        while (iterator_gen.hasNext()) {
                            String genero = iterator_gen.next();
                            Collection<String> albumes = controlAlb.retornarAlbumsDelGenero(genero);
                            controlGen.actualizarGenero(new DataGenero(genero), albumes, album_nuevo);
                        }
                        JOptionPane.showMessageDialog(lblMsjArch, "Album agregado con exito");
                        reiniciarCampos();
                    }
                }
                //// 

            } else {
                JOptionPane.showMessageDialog(lblMsjArch, "El nickname seleccionado no existe o pertenece a un usuario común");
            }
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void reiniciarCampos() {
        txtArt.setText(null);
        txtNomAlb.setText(null);
        txtLinkImg.setText(null);
        txtAnio.setText(null);
        txtNomTemaAlb.setText(null);
        txtTipMus.setText(null);
        txtPosTemaAlb.setText(null);
        fileChooser.setSelectedFile(null);
        lblMsjArch.setText("El archivo no se reconoce como un mp3");
        DefaultListModel<String> model = new DefaultListModel();
        listGenSelect.setModel(model);
        jList1.setModel(model);
        generos_seleccionados.removeAll(generos_seleccionados);
        temas_del_album.removeAll(temas_del_album);
    }

    private void btnArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchActionPerformed
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            if (selectedFile.getName().endsWith(".mp3")) {
                lblMsjArch.setText("Archivo seleccionado: " + selectedFile.getName());
            } else {
                lblMsjArch.setText("Archivo seleccionado no valido");
            }
        }
    }//GEN-LAST:event_btnArchActionPerformed

    private void cbxTipMusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipMusActionPerformed
        if (cbxTipMus.getSelectedItem() == "Archivo mp3") {
            btnArch.setVisible(true);
            lblMsjArch.setVisible(true);
        } else {
            btnArch.setVisible(false);
            lblMsjArch.setVisible(false);
        }
    }//GEN-LAST:event_cbxTipMusActionPerformed

    private void btnSelGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelGenActionPerformed
        if (generos_seleccionados.contains(listGen.getSelectedValue())) {
            JOptionPane.showMessageDialog(lblMsjArch, "Este album ya cuenta con este genero");
        } else {
            generos_seleccionados.add(listGen.getSelectedValue());
            DefaultListModel<String> model = new DefaultListModel();
            if (generos_seleccionados.isEmpty()) {

            } else {
                Iterator<String> iterator = generos_seleccionados.iterator();
                while (iterator.hasNext()) {
                    model.addElement(iterator.next());
                }
            }
            listGenSelect.setModel(model);
        }
    }//GEN-LAST:event_btnSelGenActionPerformed


    private void btnReiGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiGenActionPerformed
        DefaultListModel<String> model = new DefaultListModel();
        listGenSelect.setModel(model);
        generos_seleccionados.clear();
    }//GEN-LAST:event_btnReiGenActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // * basura * //
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtPosTemaAlbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPosTemaAlbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPosTemaAlbActionPerformed

    private void btnNukear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNukear1ActionPerformed
        Iterator<String> iterator = temas_del_album.iterator();
        while (iterator.hasNext()) {
            controlTem.BorrarTema(iterator.next());
        }
        reiniciarCampos();
        JOptionPane.showMessageDialog(lblMsjArch, "Alta de Album cancelada con exito");
    }//GEN-LAST:event_btnNukear1ActionPerformed

    public void cargarGeneros() {
        DefaultListModel<String> model = new DefaultListModel();
        Collection<String> retorno = controlGen.mostrarGeneros();
        if (retorno.isEmpty()) {

        } else {
            Iterator<String> iterator = retorno.iterator();
            while (iterator.hasNext()) {

                model.addElement(iterator.next());
            }
        }
        listGen.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArch;
    private javax.swing.JButton btnConfTem;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnNukear1;
    private javax.swing.JButton btnReiGen;
    private javax.swing.JButton btnSelGen;
    private javax.swing.JComboBox<String> cbxTipMus;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAnioAlb;
    private javax.swing.JLabel lblArt;
    private javax.swing.JLabel lblDireccionTema;
    private javax.swing.JLabel lblGenAlb1;
    private javax.swing.JLabel lblGenDelSis;
    private javax.swing.JLabel lblGenSel;
    private javax.swing.JLabel lblMsjArch;
    private javax.swing.JLabel lblNomAlb;
    private javax.swing.JLabel lblNomTemaAlb;
    private javax.swing.JLabel lblNomTemaAlb1;
    private javax.swing.JLabel lblPosTemaAlb;
    private javax.swing.JList<String> listGen;
    private javax.swing.JList<String> listGenSelect;
    private javax.swing.JTextField txtAnio;
    private javax.swing.JTextField txtArt;
    private javax.swing.JTextField txtLinkImg;
    private javax.swing.JTextField txtNomAlb;
    private javax.swing.JTextField txtNomTemaAlb;
    private javax.swing.JTextField txtPosTemaAlb;
    private javax.swing.JTextField txtTipMus;
    // End of variables declaration//GEN-END:variables
}
