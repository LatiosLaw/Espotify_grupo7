package presentacion;

import java.util.Collection;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import logica.controladores.IControladorCliente;
import logica.controladores.IControladorTema;
import logica.controladores.IControladorListaParticular;
import logica.controladores.IControladorListaPorDefecto;
import logica.controladores.IControladorAlbum;
import logica.dt.DataAlbum;
import logica.dt.DataCliente;
import logica.dt.DataListaParticular;
import logica.dt.DataListaPorDefecto;
import logica.dt.DataTema;

public class AgregarCosoFav extends javax.swing.JPanel {

    private final IControladorCliente controlCli;
    private final IControladorTema controlTema;
    private final IControladorListaParticular controlLipa;
    private final IControladorListaPorDefecto controlLiporde;
    private final IControladorAlbum controlAlb;

    public AgregarCosoFav(IControladorCliente icc, IControladorTema ict, IControladorListaParticular iclp, IControladorListaPorDefecto iclpd, IControladorAlbum ica) {
        initComponents();
        lblBusqueda1.setVisible(true);
        lstCoso.setVisible(true);
        txtBusqueda1.setVisible(true);
        cbxLPM.setVisible(false);
        lstTemas.setVisible(false);
        lblTemasAgregar.setVisible(false);
        btnBuscar.setVisible(false);
        
         lblUsuarioDeLasListas.setVisible(false);
        txtUsuarioDeLasListas.setVisible(false);
        
        this.btnFav2.setVisible(false);
            this.txtBusqueda2.setVisible(false);
            lblBusqueda2.setVisible(false);
            lblCliente2.setVisible(false);
            txtCliente2.setVisible(false);
            lstTemas.setVisible(false);
            lblTemasAgregar.setVisible(false);
        
        
        controlCli = icc;
        controlAlb = ica;
        controlLipa = iclp;
        controlLiporde = iclpd;
        controlTema = ict;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCliente = new javax.swing.JTextField();
        lblCliente = new javax.swing.JLabel();
        cbxCoso = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCoso = new javax.swing.JList<>();
        txtBusqueda1 = new javax.swing.JTextField();
        lblBusqueda1 = new javax.swing.JLabel();
        btnFav = new javax.swing.JButton();
        cbxLPM = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTemas = new javax.swing.JList<>();
        lblTemasAgregar = new javax.swing.JLabel();
        txtUsuarioDeLasListas = new javax.swing.JTextField();
        lblUsuarioDeLasListas = new javax.swing.JLabel();
        txtBusqueda2 = new javax.swing.JTextField();
        lblBusqueda2 = new javax.swing.JLabel();
        btnFav2 = new javax.swing.JButton();
        lblPrimeraBusqueda = new javax.swing.JLabel();
        lblCliente2 = new javax.swing.JLabel();
        txtCliente2 = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(860, 471));

        txtCliente.setColumns(10);

        lblCliente.setText("Nick Cliente :");

        cbxCoso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OPT", "Temas", "Listas", "Albums" }));
        cbxCoso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCosoActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstCoso);

        txtBusqueda1.setColumns(10);

        lblBusqueda1.setText("Agregar a Favoritos :");

        btnFav.setText("OK");
        btnFav.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFavActionPerformed(evt);
            }
        });

        cbxLPM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Listas Particulares", "Listas Por Defecto" }));
        cbxLPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLPMActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lstTemas);

        lblTemasAgregar.setText("Temas del Album:");

        txtUsuarioDeLasListas.setColumns(10);

        lblUsuarioDeLasListas.setText("ImGoinToAlice");

        txtBusqueda2.setColumns(10);

        lblBusqueda2.setText("Agregar a Favoritos :");

        btnFav2.setText("OK");
        btnFav2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFav2ActionPerformed(evt);
            }
        });

        lblPrimeraBusqueda.setText("Primera Busqueda");

        lblCliente2.setText("Nick Cliente :");

        txtCliente2.setColumns(10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPrimeraBusqueda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxLPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbxCoso, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblBusqueda1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBusqueda1))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUsuarioDeLasListas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtUsuarioDeLasListas, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnFav, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblBusqueda2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtBusqueda2))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblCliente2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtCliente2))
                        .addComponent(jScrollPane2))
                    .addComponent(btnFav2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTemasAgregar)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(cbxCoso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(cbxLPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuarioDeLasListas)
                    .addComponent(txtUsuarioDeLasListas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrimeraBusqueda))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBusqueda1)
                            .addComponent(txtBusqueda1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCliente))
                        .addGap(18, 18, 18)
                        .addComponent(btnFav, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTemasAgregar))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBusqueda2)
                            .addComponent(txtBusqueda2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCliente2))
                        .addGap(18, 18, 18)
                        .addComponent(btnFav2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxLPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLPMActionPerformed
        limpiarListas();
        if("Listas Particulares".equals(String.valueOf(cbxLPM.getSelectedItem()))){
             lblUsuarioDeLasListas.setVisible(true);
            txtUsuarioDeLasListas.setVisible(true);   
            btnBuscar.setVisible(true);
            lblUsuarioDeLasListas.setText("Cliente:");
               // Collection<String> lista =  controlLipa.devolverListasParticularesPublicasString(txtUsuario.getText());
             //this.cargarLstFav(lista);
            }else{
             lblUsuarioDeLasListas.setVisible(false);
             btnBuscar.setVisible(false);
            txtUsuarioDeLasListas.setVisible(false);
                Collection<String> lista =   controlLiporde.listarListasPorDefecto();

                if(lista == null){
                    JOptionPane.showMessageDialog(null, "No hay listas por defecto en el sistema. Cargue datos por favor");
                }else{
                    this.cargarLstFav(lista);
                }   
            }
    }//GEN-LAST:event_cbxLPMActionPerformed

    private void cbxCosoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCosoActionPerformed
        String token = String.valueOf(cbxCoso.getSelectedItem());
        limpiarListas();
        if("OPT".equals(token)){
            //this.limpiarCampos();
            
            lstTemas.setVisible(false);
            lblTemasAgregar.setVisible(false);
            cbxLPM.setVisible(false);
            lblUsuarioDeLasListas.setVisible(false);
            txtUsuarioDeLasListas.setVisible(false);
            btnBuscar.setVisible(false);
            this.lblBusqueda1.setText("Busqueda 1");
            lblPrimeraBusqueda.setText("Busqueda 1:");
            
            
          //  this.txtCliente.setVisible(false);
           // this.lblCliente.setVisible(false);
            
            this.btnFav2.setVisible(false);
            this.txtBusqueda2.setVisible(false);
            lblBusqueda2.setVisible(false);
            lblCliente2.setVisible(false);
            txtCliente2.setVisible(false);
            lstTemas.setVisible(false);
            lblTemasAgregar.setVisible(false);
            
            
            JOptionPane.showMessageDialog(null, "Seleccione otra opcion a parte de OPT.");
           
        }else if("Temas".equals(token)){
            lstTemas.setVisible(true);
            lblTemasAgregar.setVisible(true);
            cbxLPM.setVisible(false);
            lblUsuarioDeLasListas.setVisible(false);
            txtUsuarioDeLasListas.setVisible(false);
            btnBuscar.setVisible(false);
            this.lblBusqueda1.setText("Album");
            lblPrimeraBusqueda.setText("Albums:");
            
            
            this.txtCliente.setVisible(false);
            this.lblCliente.setVisible(false);
            
            this.btnFav2.setVisible(true);
            this.txtBusqueda2.setVisible(true);
            lblBusqueda2.setVisible(true);
            lblCliente2.setVisible(true);
            txtCliente2.setVisible(true);
            lstTemas.setVisible(true);
            lblTemasAgregar.setVisible(true);
            
            Collection<String> colec = this.controlAlb.retornarAlbumsString();
               
             if(colec == null){
                   JOptionPane.showMessageDialog(null, "No hay albums en el sistema. Cargue datos por favor");
             }else{
                 this.cargarLstFav(colec);
             }
             
               
            
        }else if ("Listas".equals(token)){
             this.txtCliente.setVisible(true);
             lblCliente.setVisible(true);
            cbxLPM.setVisible(true);
            lstTemas.setVisible(false);
            lblTemasAgregar.setVisible(false);
            lblUsuarioDeLasListas.setVisible(true);
            txtUsuarioDeLasListas.setVisible(true);
            
             this.btnFav2.setVisible(false);
            this.txtBusqueda2.setVisible(false);
            lblBusqueda2.setVisible(false);
            lblCliente2.setVisible(false);
            txtCliente2.setVisible(false);
            lstTemas.setVisible(false);
            
            this.lblBusqueda1.setText("Lista");
            lblPrimeraBusqueda.setText("Listas:");
            if("Listas Particulares".equals(String.valueOf(cbxLPM.getSelectedItem()))){
                lblUsuarioDeLasListas.setText("Cliente:");
              
               
               btnBuscar.setVisible(true);
               
              

            }else{
                btnBuscar.setVisible(false);
                Collection<String> lista =   controlLiporde.listarListasPorDefecto();

                if(lista == null){
                    JOptionPane.showMessageDialog(null, "No hay listas por defecto en el sistema. Cargue datos por favor");
                }else{
                    this.cargarLstFav(lista);
                }   
            }
            
        }else{
            //Albums
            lstTemas.setVisible(false);
            lblTemasAgregar.setVisible(false);
            cbxLPM.setVisible(false);
            lblUsuarioDeLasListas.setVisible(false);
            txtUsuarioDeLasListas.setVisible(false);
            this.lblBusqueda1.setText("Album");
            lblPrimeraBusqueda.setText("Albums:");
            btnBuscar.setVisible(false);
            
            this.btnFav2.setVisible(false);
            this.txtBusqueda2.setVisible(false);
            lblBusqueda2.setVisible(false);
            lblCliente2.setVisible(false);
            txtCliente2.setVisible(false);
            lstTemas.setVisible(false);
            lblTemasAgregar.setVisible(false);
            this.txtCliente.setVisible(true);
             lblCliente.setVisible(true);
            
            Collection<String> colec = this.controlAlb.retornarAlbumsString();
            if(colec == null){
                   JOptionPane.showMessageDialog(null, "No hay albums en el sistema. Cargue datos por favor");
             }else{
                 this.cargarLstFav(colec);
             }
            
        }
        
    }//GEN-LAST:event_cbxCosoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
         String token = String.valueOf(cbxCoso.getSelectedItem());
        
        if("OPT".equals(token)){
            JOptionPane.showMessageDialog(null, "Seleccione otra opcion a parte de OPT.");
        }else if ("Listas".equals(token)){
            String token2 = String.valueOf(cbxLPM.getSelectedItem());
            if("Listas Particulares".equals(token2)){
                if(controlCli.consultarPerfilCliente(txtUsuarioDeLasListas.getText()) != null){
                    Collection<String> lista =  controlLipa.devolverListasParticularesPublicasString(txtUsuarioDeLasListas.getText());
                    if(lista.isEmpty()){
                         JOptionPane.showMessageDialog(null, "El Cliente indicado no tiene listas particulares.");
                    }else{
                         this.cargarLstFav(lista);
                    }
                } else{
                    JOptionPane.showMessageDialog(null, "No existe Cliente con ese Nick");
                }

            }
  
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnFavActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFavActionPerformed
         String token = String.valueOf(cbxCoso.getSelectedItem());
        if("OPT".equals(token)){
           
              JOptionPane.showMessageDialog(null, "Seleccione otra opcion a parte de OPT.");
           //controlCli.agregarTema(nickcli, tema);
        }else if(token == "Temas"){
          
            DataAlbum album = controlAlb.retornarInfoAlbum(txtBusqueda1.getText());
            DataCliente cli = controlCli.consultarPerfilCliente(txtCliente.getText());
            
            if("ALBUM NO EXISTE".equals(album.getNombre())){
                 JOptionPane.showMessageDialog(null, "No hay Album a ese nombre");
            }else{
                     Collection<String> cole = this.controlTema.retornarTemasDeAlbumStringEdition(this.txtBusqueda1.getText()); 
                    
                    if(cole.isEmpty() || cole == null){
                         JOptionPane.showMessageDialog(null, "El album seleccionado no tiene Temas");
                    }else{
                        this.cargarLstTemas(cole);
                    }
                }   
            
           
        }else if(token == "Listas"){
            
            String token2 = String.valueOf(cbxLPM.getSelectedItem());
            if("Listas Particulares".equals(token2)){
                DataCliente usuarioDeLaLista = controlCli.consultarPerfilCliente(txtUsuarioDeLasListas.getText());
                if(usuarioDeLaLista == null){
                     JOptionPane.showMessageDialog(null, "El Cliente poseedor de las listas no existe");
                }else{
                     DataListaParticular listaPar = this.controlLipa.devolverInformacion(txtBusqueda1.getText(),txtUsuarioDeLasListas.getText());
                    if(listaPar == null){
                    JOptionPane.showMessageDialog(null, "No existe Lista a ese Nombre");
                }else{
                    
                    if(controlCli.consultarPerfilCliente(txtCliente.getText()) == null){
                         JOptionPane.showMessageDialog(null, "No Cliente con ese Nick");
                    }else{
                          controlCli.agregarLista(controlCli.consultarPerfilCliente(txtCliente.getText()), listaPar);
                          JOptionPane.showMessageDialog(null, "Se agrego la Lista a la lista de favoritos");
                          this.limpiarCampos();
                    }
                }
                }

            }else{
                
                DataListaPorDefecto listaPorDe = this.controlLiporde.devolverInformacionChu(txtBusqueda1.getText());
                
                if(listaPorDe == null){
                       JOptionPane.showMessageDialog(null, "No existe Lista a ese Nombre");
                }else{
                      controlCli.agregarLista(controlCli.consultarPerfilCliente(txtCliente.getText()), listaPorDe);
            
                 JOptionPane.showMessageDialog(null, "Se agrego la Lista a la lista de favoritos");
                this.limpiarCampos();
                }
                
                
                
              
                
                
            }
        }else if("Albums".equals(token)){
            
            DataAlbum album = controlAlb.retornarInfoAlbum(txtBusqueda1.getText());
            DataCliente cli = controlCli.consultarPerfilCliente(txtCliente.getText());
            
            if("ALBUM NO EXISTE".equals(album.getNombre())){
                 JOptionPane.showMessageDialog(null, "No hay Album a ese nombre");
            }else{
                if(cli == null){
                     JOptionPane.showMessageDialog(null, "No Cliente con ese Nick");
                }else{
                     controlCli.agregarAlbum(cli, album);
                      JOptionPane.showMessageDialog(null, "Se agrego Album a la lista de favoritos");
                      this.limpiarCampos();
                }   
            } 
        }
    }//GEN-LAST:event_btnFavActionPerformed

    private void btnFav2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFav2ActionPerformed
        
        DataCliente cli = controlCli.consultarPerfilCliente(this.txtCliente2.getText());
        DataTema tema = controlTema.retornarTema2LaSecuela(this.txtBusqueda2.getText());
        
        if(tema == null){
             JOptionPane.showMessageDialog(null, "No existe tema a ese nombre");
        }else if(cli == null){
                 JOptionPane.showMessageDialog(null, "No Cliente con ese Nick");
            }else{
                this.controlCli.agregarTema(cli,tema);   
                JOptionPane.showMessageDialog(null, "Se agrego el Tema a la lista de favoritos");
                this.limpiarCampos();
            }

    }//GEN-LAST:event_btnFav2ActionPerformed

    public void cargarLstFav(Collection<String> cole) {
        DefaultListModel<String> model;

        model = new DefaultListModel<>();

        for (String elemento : cole) {
            //  System.out.print("Elemento de lstSeguidos"+elemento);
            String nombre = elemento;
            model.addElement(nombre);
        }
        lstCoso.setModel(model);
    }
    public void cargarLstTemas(Collection<String> cole) {
        DefaultListModel<String> model;

        model = new DefaultListModel<>();

        for (String elemento : cole) {
            //  System.out.print("Elemento de lstSeguidos"+elemento);
            String nombre = elemento;
            model.addElement(nombre);
        }
        lstTemas.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnFav;
    private javax.swing.JButton btnFav2;
    private javax.swing.JComboBox<String> cbxCoso;
    private javax.swing.JComboBox<String> cbxLPM;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBusqueda1;
    private javax.swing.JLabel lblBusqueda2;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblCliente2;
    private javax.swing.JLabel lblPrimeraBusqueda;
    private javax.swing.JLabel lblTemasAgregar;
    private javax.swing.JLabel lblUsuarioDeLasListas;
    private javax.swing.JList<String> lstCoso;
    private javax.swing.JList<String> lstTemas;
    private javax.swing.JTextField txtBusqueda1;
    private javax.swing.JTextField txtBusqueda2;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCliente2;
    private javax.swing.JTextField txtUsuarioDeLasListas;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
      this.txtBusqueda1.setText("");
      this.txtBusqueda2.setText("");
      this.txtCliente.setText("");
      this.txtCliente2.setText("");
      this.txtUsuarioDeLasListas.setText("");
      limpiarListas();
    }
    private void limpiarListas() {
      this.lstTemas.setModel(new javax.swing.DefaultListModel<>());
      this.lstCoso.setModel(new javax.swing.DefaultListModel<>());
    }
    
    
    
}
