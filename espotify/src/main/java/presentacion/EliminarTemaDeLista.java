package presentacion;

import java.util.Collection;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import logica.controladores.IControladorAlbum;
import logica.controladores.IControladorCliente;
import logica.controladores.IControladorListaParticular;
import logica.controladores.IControladorListaPorDefecto;
import logica.controladores.IControladorTema;
import logica.dt.DataCliente;
import logica.dt.DataListaPorDefecto;
import logica.dt.DataTema;
import static presentacion.EliminarFavoritos.separarTemaAlbum;

public class EliminarTemaDeLista extends javax.swing.JPanel {

    private IControladorCliente controlCli;
    private IControladorListaParticular controlListPart;
    private IControladorListaPorDefecto controlListPD;
    private IControladorTema controlTem;
    private IControladorAlbum controlAlb;
    String selectedFirstFilter;
    String selectedTema;
    String selectedCliente;
    String selectedLista;

    public EliminarTemaDeLista(IControladorCliente controlador, IControladorListaParticular conlip, IControladorListaPorDefecto conpd, IControladorTema cont, IControladorAlbum conalb) {
        initComponents();
        this.controlCli = controlador;
        this.controlListPart = conlip;
        this.controlListPD = conpd;
        this.controlTem = cont;
        this.controlAlb = conalb;
lblClienteSeleccionado.setVisible(false);
jComboCliente.setVisible(false);

        lstTemas.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Evitar acciones repetidas cuando la selección sigue cambiando
                if (!e.getValueIsAdjusting()) {
                    // Obtener el nombre seleccionado
                    selectedTema = lstTemas.getSelectedValue();
                    if(selectedTema!=null){
                    txtTemaSeleccionado.setText(selectedTema);
                    }
                    }
            }
        });
        
        lstListas.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Evitar acciones repetidas cuando la selección sigue cambiando
                if (!e.getValueIsAdjusting()) {
                    // Obtener el nombre seleccionado
                    selectedLista = lstListas.getSelectedValue();
                    if(selectedLista!=null){
                    txtListaSeleccionada.setText(selectedLista);
                    
                    if(String.valueOf(jComboSegundoFiltro.getSelectedItem()) == "OPT"){
                        JOptionPane.showMessageDialog(null, "Por favor, seleccione una lista un tema a eliminar.");
                    }else if(String.valueOf(jComboSegundoFiltro.getSelectedItem()) == "Por Cliente"){
                        cargarTemasDeListaParticular();
                    }else{
                            cargarTemasListasPD();
                    }
                }
                    }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFiltroDeListas = new javax.swing.JLabel();
        lblTemasPosibles = new javax.swing.JLabel();
        btnConfirmar = new javax.swing.JButton();
        txtTemaSeleccionado = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstListas = new javax.swing.JList<>();
        lblListasClientes = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstTemas = new javax.swing.JList<>();
        jComboSegundoFiltro = new javax.swing.JComboBox<>();
        lblTemaSeleccionado = new javax.swing.JLabel();
        lblListaSeleccionada = new javax.swing.JLabel();
        txtListaSeleccionada = new javax.swing.JTextField();
        lblClienteSeleccionado = new javax.swing.JLabel();
        jComboCliente = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(860, 471));

        lblFiltroDeListas.setText("Filtro de Listas : ");

        lblTemasPosibles.setText("Temas Posibles : ");

        btnConfirmar.setText("Eliminar De Lista");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        txtTemaSeleccionado.setEditable(false);
        txtTemaSeleccionado.setBackground(new java.awt.Color(204, 204, 204));
        txtTemaSeleccionado.setColumns(10);
        txtTemaSeleccionado.setForeground(new java.awt.Color(0, 0, 0));

        jScrollPane4.setViewportView(lstListas);

        lblListasClientes.setText("Listas : ");

        jScrollPane6.setViewportView(lstTemas);

        jComboSegundoFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OPT", "Por Cliente", "Por Defecto" }));
        jComboSegundoFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboSegundoFiltroActionPerformed(evt);
            }
        });

        lblTemaSeleccionado.setText("Tema Seleccionado : ");

        lblListaSeleccionada.setText("Lista Seleccionada : ");

        txtListaSeleccionada.setEditable(false);
        txtListaSeleccionada.setBackground(new java.awt.Color(204, 204, 204));
        txtListaSeleccionada.setColumns(10);
        txtListaSeleccionada.setForeground(new java.awt.Color(0, 0, 0));

        lblClienteSeleccionado.setText("Cliente : ");

        jComboCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblFiltroDeListas)
                            .addGap(27, 27, 27)
                            .addComponent(jComboSegundoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblListasClientes)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblClienteSeleccionado)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblListaSeleccionada)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtListaSeleccionada))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTemasPosibles)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblTemaSeleccionado)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTemaSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(296, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFiltroDeListas)
                            .addComponent(jComboSegundoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClienteSeleccionado)
                            .addComponent(jComboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblListasClientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTemasPosibles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTemaSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTemaSeleccionado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListaSeleccionada)
                    .addComponent(txtListaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(182, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if(txtTemaSeleccionado.getText().isEmpty() && txtListaSeleccionada.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una lista un tema a eliminar.");
        }else{
            if(String.valueOf(jComboSegundoFiltro.getSelectedItem()) == "OPT"){
                JOptionPane.showMessageDialog(null, "Por favor, seleccione una lista un tema a eliminar.");
            }else if(String.valueOf(jComboSegundoFiltro.getSelectedItem()) == "Por Cliente"){
                controlListPart.quitarTema(selectedCliente, separarString(selectedLista)[0], separarString(selectedTema)[0], separarString(selectedTema)[1]);
                JOptionPane.showMessageDialog(null, "Tema eliminado de la lista con exito.");
                reiniciarCampos();
            }else{
                controlListPD.quitarTema(separarString(selectedLista)[0], separarString(selectedLista)[1], separarString(selectedTema)[0], separarString(selectedTema)[1]);
                JOptionPane.showMessageDialog(null, "Tema eliminado de la lista con exito.");
                reiniciarCampos();
            }
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void jComboSegundoFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboSegundoFiltroActionPerformed
       String token = String.valueOf(jComboSegundoFiltro.getSelectedItem());
        switch (token) {
            case "OPT" -> {
                lblClienteSeleccionado.setVisible(false);
                jComboCliente.setVisible(false);
                reiniciarCampos();
                break;
            }
            case "Por Cliente" -> {
                lblClienteSeleccionado.setVisible(true);
                jComboCliente.setVisible(true);
                reiniciarCampos();
                cargarClientes();
                break;
            }
            case "Por Defecto" -> {
                lblClienteSeleccionado.setVisible(false);
                jComboCliente.setVisible(false);
                reiniciarCampos();
                cargarListasPDParaEliminarTema();
                break;
            }
        }
    }//GEN-LAST:event_jComboSegundoFiltroActionPerformed

    public static String[] separarString(String nombreCompleto) {
        // Dividir directamente sin validación
        return nombreCompleto.split("/", 2); // Limitar a 2 partes
    }
    
       private void cargarClientes(){
        Collection<DataCliente> cole = this.controlCli.mostrarClientes();
        DefaultComboBoxModel<String> model;
        model = new DefaultComboBoxModel<>();
        model.addElement("OPT");
        for (DataCliente elemento : cole) {
            String nick = elemento.getNickname();
            model.addElement(nick);
        }
        this.jComboCliente.setModel(model);
       }
    
    private void cargarTemasDeListaParticular(){
        Collection<DataTema> temas = controlTem.retornarTemasDeLaLista(separarString(selectedLista)[0], 2);
        DefaultListModel<String> model;
        model = new DefaultListModel<>();
        for (DataTema elemento : temas) {
            model.addElement(elemento.getNickname().concat("/").concat(elemento.getNomAlb()));
        }
        this.lstTemas.setModel(model);
    }
    
    private void cargarTemasListasPD(){
        Collection<DataTema> temas = controlTem.retornarTemasDeLaLista(separarString(selectedLista)[0], 1);
        DefaultListModel<String> model;
        model = new DefaultListModel<>();
        for (DataTema elemento : temas) {
            model.addElement(elemento.getNickname().concat("/").concat(elemento.getNomAlb()));
        }
        this.lstTemas.setModel(model);
    }
    
    private void cargarListasPDParaEliminarTema(){
        Collection<String> listasPD = controlListPD.listarListasPorDefectoConGenero();
        DefaultListModel<String> model;
        model = new DefaultListModel<>();
        for (String elemento : listasPD) {
            model.addElement(elemento);
        }
        this.lstListas.setModel(model);
    }
    
    private void cargarListasDelCliente(){
        Collection<String> listasParticularesPublicas = controlListPart.devolverListasParticularesPublicasString(selectedCliente);
        DefaultListModel<String> model;
        model = new DefaultListModel<>();
        for (String elemento : listasParticularesPublicas) {
            model.addElement(elemento);
        }
        this.lstListas.setModel(model);
    }
    
    private void jComboClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboClienteActionPerformed
        if(String.valueOf(jComboCliente.getSelectedItem())=="OPT" && String.valueOf(jComboSegundoFiltro.getSelectedItem())!="OPT"){
            JOptionPane.showMessageDialog(null, "Seleccione un cliente.");
        }else{
            selectedCliente = String.valueOf(jComboCliente.getSelectedItem());
            cargarListasDelCliente();
    }
    }//GEN-LAST:event_jComboClienteActionPerformed

    public void reiniciarCampos(){
        DefaultListModel<String> model;
        model = new DefaultListModel<>();
        this.lstListas.setModel(model); 
        this.lstTemas.setModel(model); 
        txtListaSeleccionada.setText(null);
        txtTemaSeleccionado.setText(null);
        selectedCliente = null;
        selectedLista = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JComboBox<String> jComboCliente;
    private javax.swing.JComboBox<String> jComboSegundoFiltro;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblClienteSeleccionado;
    private javax.swing.JLabel lblFiltroDeListas;
    private javax.swing.JLabel lblListaSeleccionada;
    private javax.swing.JLabel lblListasClientes;
    private javax.swing.JLabel lblTemaSeleccionado;
    private javax.swing.JLabel lblTemasPosibles;
    private javax.swing.JList<String> lstListas;
    private javax.swing.JList<String> lstTemas;
    private javax.swing.JTextField txtListaSeleccionada;
    private javax.swing.JTextField txtTemaSeleccionado;
    // End of variables declaration//GEN-END:variables
}
